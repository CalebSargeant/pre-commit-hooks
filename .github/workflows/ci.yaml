name: CI
permissions:
  contents: read
  pull-requests: read

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  merge-gate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: '20'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
        with:
          terraform_wrapper: false

      - name: Setup Helm
        uses: azure/setup-helm@1a275c3b69536ee54be43f2070a358922e12c8d4 # v4.3.1

      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@2ba527d4d055ab63514ba50a99456fc35684947f # v2.1.0

      - name: Restore tools cache
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: bin
          key: merge-gate-tools-${{ runner.os }}-v1
          restore-keys: merge-gate-tools-${{ runner.os }}

      - name: Restore python cache
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: .venv
          key: merge-gate-venv-${{ runner.os }}-${{ hashFiles('**/requirements.txt', '.python-version') }}-v1
          restore-keys: merge-gate-venv-${{ runner.os }}

      - name: Install tools (parallel)
        run: |
          set -Eeuo pipefail
          mkdir -p bin
          BIN="$PWD/bin"

          # Check if tools already cached
          if [[ -f "$BIN/actionlint" && -f "$BIN/gitleaks" && -f "$BIN/kubeconform" && -f "$BIN/tfsec" && -f "$BIN/trivy" ]]; then
            echo "Tools already cached, skipping downloads"
          else
            # Start all downloads in background
            echo "Downloading actionlint..."
            (
              curl -sSfL https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download/actionlint.bash | bash -s -- -b "$BIN"
            ) &

            echo "Downloading gitleaks..."
            (
              GL_VERSION=$(curl -sSL https://api.github.com/repos/gitleaks/gitleaks/releases/latest | jq -r '.tag_name' | sed 's/^v//')
              curl -sSL -o "$BIN/gitleaks.tar.gz" "https://github.com/gitleaks/gitleaks/releases/download/v${GL_VERSION}/gitleaks_${GL_VERSION}_linux_x64.tar.gz"
              tar -C "$BIN" -xzf "$BIN/gitleaks.tar.gz" gitleaks
              rm -f "$BIN/gitleaks.tar.gz"
            ) &

            echo "Downloading kubeconform..."
            (
              KCF_VERSION=$(curl -sSL https://api.github.com/repos/yannh/kubeconform/releases/latest | jq -r '.tag_name' | sed 's/^v//')
              curl -sSL -o "$BIN/kubeconform.tar.gz" "https://github.com/yannh/kubeconform/releases/download/v${KCF_VERSION}/kubeconform-linux-amd64.tar.gz"
              tar -C "$BIN" -xzf "$BIN/kubeconform.tar.gz" kubeconform
              rm -f "$BIN/kubeconform.tar.gz"
            ) &

            echo "Downloading tfsec..."
            (
              TFSEC_VERSION=$(curl -sSL https://api.github.com/repos/aquasecurity/tfsec/releases/latest | jq -r '.tag_name' | sed 's/^v//')
              curl -sSL -o "$BIN/tfsec" https://github.com/aquasecurity/tfsec/releases/download/v${TFSEC_VERSION}/tfsec-linux-amd64
              chmod +x "$BIN/tfsec"
            ) &

            echo "Downloading trivy..."
            (
              TV=$(curl -sSL https://api.github.com/repos/aquasecurity/trivy/releases/latest | jq -r '.tag_name' | sed 's/^v//')
              curl -sSfL -o trivy.tar.gz "https://github.com/aquasecurity/trivy/releases/download/v${TV}/trivy_${TV}_Linux-64bit.tar.gz"
              tar -xzf trivy.tar.gz trivy
              mv trivy "$BIN/"
              rm -f trivy.tar.gz
            ) &

            wait
          fi

          # APT installs (serial, requires lock)
          echo "Installing yamllint..."
          sudo apt-get update
          sudo apt-get install -y yamllint python3-pip

          echo "$BIN" >> "$GITHUB_PATH"

      - name: Setup python venv
        run: |
          set -Eeuo pipefail
          if [[ ! -d .venv ]]; then
            python3 -m venv .venv
          fi
          . .venv/bin/activate
          python -m pip install --upgrade pip
          python -m pip install pip-audit checkov
          deactivate
          echo "$PWD/.venv/bin" >> "$GITHUB_PATH"

      - name: Run merge gate checks
        env:
          GITHUB_BASE_REF: ${{ github.base_ref }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
          PATH: ${{ github.workspace }}/bin:${{ github.workspace }}/.venv/bin:${{ env.PATH }}
        run: ./hooks/ci-merge-gate.sh
